{"ast":null,"code":"var _jsxFileName = \"/Users/wangjiamin/Documents/GitHub/makeup-starters/src/SkinTemptColor.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//import '../SkinTemptColor.html'\nexport function SkinTemptColor(props) {\n  let preview = document.getElementById(\"preview\");\n  function handleClick(event) {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia({\n        video: true\n      })\n\n      // navigator.mediaDevices.getUserMedia({\n      //         video: true,\n      //         audio: true,\n      //     })\n      .then(stream => {\n        preview.srcObject = stream;\n        //downloadButton.href = stream;\n        preview.captureStream = preview.captureStream || preview.mozCaptureStream;\n        return new Promise(resolve => preview.onplaying = resolve);\n      }).then(() => startRecording(preview.captureStream(), recordingTimeMS)).then(recordedChunks => {\n        let recordedBlob = new Blob(recordedChunks, {\n          type: \"video/webm\"\n        });\n        recording.src = URL.createObjectURL(recordedBlob);\n        //downloadButton.href = recording.src;\n        //downloadButton.download = \"RecordedVideo.webm\";\n\n        console.log(`Successfully recorded ${recordedBlob.size} bytes of ${recordedBlob.type} media.`);\n      }).catch(error => {\n        if (error.name === \"NotFoundError\") {\n          console.log(\"Camera or microphone not found. Can't record.\");\n        } else {\n          console.log('error');\n        }\n      });\n      function startRecording(stream, lengthInMS) {\n        let recorder = new MediaRecorder(stream);\n        let data = [];\n        recorder.ondataavailable = event => data.push(event.data);\n        recorder.start();\n        console.log(`${recorder.state} for ${lengthInMS / 1000} seconds…`);\n        let stopped = new Promise((resolve, reject) => {\n          recorder.onstop = resolve;\n          recorder.onerror = event => reject(event.name);\n        });\n        let recorded = wait(lengthInMS).then(() => {\n          if (recorder.state === \"recording\") {\n            recorder.stop();\n          }\n        });\n        return Promise.all([stopped, recorded]).then(() => data);\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"this function will help you to know your skin Tempterature\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-body\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \" start testing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"this function will help you to know your skin Tempterature\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"camera required\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n_c = SkinTemptColor;\nvar _c;\n$RefreshReg$(_c, \"SkinTemptColor\");","map":{"version":3,"names":["SkinTemptColor","props","preview","document","getElementById","handleClick","event","navigator","mediaDevices","getUserMedia","video","then","stream","srcObject","captureStream","mozCaptureStream","Promise","resolve","onplaying","startRecording","recordingTimeMS","recordedChunks","recordedBlob","Blob","type","recording","src","URL","createObjectURL","console","log","size","catch","error","name","lengthInMS","recorder","MediaRecorder","data","ondataavailable","push","start","state","stopped","reject","onstop","onerror","recorded","wait","stop","all","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["/Users/wangjiamin/Documents/GitHub/makeup-starters/src/SkinTemptColor.js"],"sourcesContent":["//import '../SkinTemptColor.html'\nexport function SkinTemptColor(props){\n    let preview = document.getElementById(\"preview\");\n    function handleClick(event){\n        \n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            navigator.mediaDevices.getUserMedia({\n                video: true\n            })\n            \n            \n        // navigator.mediaDevices.getUserMedia({\n        //         video: true,\n        //         audio: true,\n        //     })\n            .then((stream) => {\n                preview.srcObject = stream;\n                //downloadButton.href = stream;\n                preview.captureStream =\n                preview.captureStream || preview.mozCaptureStream;\n                return new Promise((resolve) => (preview.onplaying = resolve));\n            })\n            .then(() => startRecording(preview.captureStream(), recordingTimeMS))\n            .then((recordedChunks) => {\n                let recordedBlob = new Blob(recordedChunks, { type: \"video/webm\" });\n                recording.src = URL.createObjectURL(recordedBlob);\n                //downloadButton.href = recording.src;\n                //downloadButton.download = \"RecordedVideo.webm\";\n\n            console.log(\n                `Successfully recorded ${recordedBlob.size} bytes of ${recordedBlob.type} media.`\n             );\n            })\n            .catch((error) => {\n                if (error.name === \"NotFoundError\") {\n                    console.log(\"Camera or microphone not found. Can't record.\");\n                } else {\n                    console.log('error');\n            }\n            });\n           \n           \n\n              function startRecording(stream, lengthInMS) {\n                let recorder = new MediaRecorder(stream);\n                let data = [];\n              \n                recorder.ondataavailable = (event) => data.push(event.data);\n                recorder.start();\n                console.log(`${recorder.state} for ${lengthInMS / 1000} seconds…`);\n              \n                let stopped = new Promise((resolve, reject) => {\n                  recorder.onstop = resolve;\n                  recorder.onerror = (event) => reject(event.name);\n                });\n              \n                let recorded = wait(lengthInMS).then(() => {\n                  if (recorder.state === \"recording\") {\n                    recorder.stop();\n                  }\n                });\n              \n                return Promise.all([stopped, recorded]).then(() => data);\n              }\n\n\n              \n              \n        }\n          \n        return(\n            <p>this function will help you to know your skin Tempterature</p>\n            \n        );\n        \n    }\n    return (\n        <div className=\"main-body\">\n                <button onClick={handleClick}> start testing</button>\n                <p>this function will help you to know your skin Tempterature</p>\n                <p>camera required</p>\n        </div>\n        \n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}