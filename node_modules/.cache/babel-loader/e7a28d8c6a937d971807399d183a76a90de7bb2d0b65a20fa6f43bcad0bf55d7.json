{"ast":null,"code":"// //import '../SkinTemptColor.html'\n// import './index.css';\n// import React, { useRef, useEffect} from 'react';\n\n// export function SkinTemptColor(props){\n\n//     const stopButton= document.getElementById(\"stopButton\");\n//     let preview = document.getElementById(\"preview\");\n//     let recordingTimeMS = 3000;\n//     let recording = document.getElementById(\"recording\");\n\n//     function wait(delayInMS) {\n//         return new Promise((resolve) => setTimeout(resolve, delayInMS));\n//       }\n\n//     function startRecording(stream, lengthInMS) {\n\n//         let recorder = new MediaRecorder(stream);\n//         let data = [];\n\n//         recorder.ondataavailable = (event) => data.push(event.data);\n//         recorder.start();\n//         //console.log(`${recorder.state} for ${lengthInMS / 1000} seconds…`);\n\n//         let stopped = new Promise((resolve, reject) => {\n//           recorder.onstop = resolve;\n//           recorder.onerror = (event) => reject(event.name);\n//         });\n\n//         let recorded = wait(lengthInMS).then(() => {\n//           if (recorder.state === \"recording\") {\n//             recorder.stop();\n//           }\n\n//         });\n\n//         return Promise.all([stopped, recorded]).then(() => data);\n//       }\n\n//     function stop(stream) {\n//         stream.getTracks().forEach((track) => track.stop());\n//     }\n\n//     function handleClick(event){\n\n//         if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n//             navigator.mediaDevices.getUserMedia({\n//                 video: true\n//             })\n\n//             .then((stream) => {\n//                 preview.srcObject = stream;\n//                 //preview.requestPictureInPicture();\n\n//                 preview.captureStream =\n//                 preview.captureStream || preview.mozCaptureStream;\n//                 return new Promise((resolve) => (preview.onplaying = resolve));\n//             })\n//             .then(() => startRecording(preview.captureStream(), recordingTimeMS))\n//             .then((recordedChunks) => {\n//                 let recordedBlob = new Blob(recordedChunks, { type: \"video/webm\" });\n//                 recording.src = URL.createObjectURL(recordedBlob);\n\n//             console.log(\n//                 `Successfully recorded ${recordedBlob.size} bytes of ${recordedBlob.type} media.`\n//              );\n//             })\n//             .catch((error) => {\n//                 if (error.name === \"NotFoundError\") {\n//                     console.log(\"Camera or microphone not found. Can't record.\");\n//                 } else {\n//                     console.log('error');\n//             }\n//             });\n\n//         }\n\n//     }\n\n//     function handleStop(event){\n//         //let stopButton = document.getElementById(\"stopButton\");\n//         //preview.srcObject\n//         // if (preview !== null) { \n\n//         //     stop(preview.srcObject);\n\n//         // } \n//         // else{\n//             if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n\n//             navigator.mediaDevices.getUserMedia({\n//                 video: true\n//             }).then((stream) => {\n//                 preview.srcObject = stream;\n//                 preview.captureStream =\n//                 preview.captureStream || preview.mozCaptureStream;\n//                 return new Promise((resolve) => (preview.onpause = resolve));\n//             }).then(() => stop(preview.captureStream()))\n//             .catch((error) => {\n//                 if (error.name === \"NotFoundError\") {\n//                     console.log(\"Camera or microphone not found. Can't record.\");\n//                 } else {\n//                     console.log('error');\n//             }\n//             });\n\n//         // }\n//         }\n//     }\n\n//     function stopRecord (stream){\n//         let recorder = new MediaRecorder(stream);\n//         recorder.stop();\n//     }\n\n//     return (\n//         <div className=\"main-body\">\n\n//                 <p>this function will help you to know your skin Tempterature</p>\n//                 <p>camera required</p>\n//                 <div className=\"start\">\n//                     <button onClick={handleClick}> start testing</button>\n//                     <video id=\"preview\" width=\"160\" height=\"120\" autopplay=\"true\"></video>\n//                 </div>\n\n//                 <div>\n//                 {/* <video \n//                 ref={videoRef}\n//                 autoPlay\n//                 /> */}\n//                     {/* <h2>Recording</h2> */}\n//                     <video id=\"recording\" width=\"160\" height=\"120\" controls></video>\n//                 </div>\n//                 <div className=\"stop\">\n//                     <button onClick={handleStop} id=\"stopButton\" className=\"button\">Stop Recording</button>\n//                  </div>\n//         </div>\n\n//     );\n// }","map":{"version":3,"names":[],"sources":["/Users/wangjiamin/Documents/GitHub/makeup-starters/src/SkinTemptColor.js"],"sourcesContent":["// //import '../SkinTemptColor.html'\n// import './index.css';\n// import React, { useRef, useEffect} from 'react';\n\n \n\n// export function SkinTemptColor(props){\n\n//     const stopButton= document.getElementById(\"stopButton\");\n//     let preview = document.getElementById(\"preview\");\n//     let recordingTimeMS = 3000;\n//     let recording = document.getElementById(\"recording\");\n\n//     function wait(delayInMS) {\n//         return new Promise((resolve) => setTimeout(resolve, delayInMS));\n//       }\n\n//     function startRecording(stream, lengthInMS) {\n      \n       \n//         let recorder = new MediaRecorder(stream);\n//         let data = [];\n\n//         recorder.ondataavailable = (event) => data.push(event.data);\n//         recorder.start();\n//         //console.log(`${recorder.state} for ${lengthInMS / 1000} seconds…`);\n        \n//         let stopped = new Promise((resolve, reject) => {\n//           recorder.onstop = resolve;\n//           recorder.onerror = (event) => reject(event.name);\n//         });\n      \n//         let recorded = wait(lengthInMS).then(() => {\n//           if (recorder.state === \"recording\") {\n//             recorder.stop();\n//           }\n\n         \n        \n\n//         });\n      \n//         return Promise.all([stopped, recorded]).then(() => data);\n//       }\n\n    \n//     function stop(stream) {\n//         stream.getTracks().forEach((track) => track.stop());\n//     }\n\n\n//     function handleClick(event){\n        \n//         if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n//             navigator.mediaDevices.getUserMedia({\n//                 video: true\n//             })\n            \n//             .then((stream) => {\n//                 preview.srcObject = stream;\n//                 //preview.requestPictureInPicture();\n\n//                 preview.captureStream =\n//                 preview.captureStream || preview.mozCaptureStream;\n//                 return new Promise((resolve) => (preview.onplaying = resolve));\n//             })\n//             .then(() => startRecording(preview.captureStream(), recordingTimeMS))\n//             .then((recordedChunks) => {\n//                 let recordedBlob = new Blob(recordedChunks, { type: \"video/webm\" });\n//                 recording.src = URL.createObjectURL(recordedBlob);\n\n//             console.log(\n//                 `Successfully recorded ${recordedBlob.size} bytes of ${recordedBlob.type} media.`\n//              );\n//             })\n//             .catch((error) => {\n//                 if (error.name === \"NotFoundError\") {\n//                     console.log(\"Camera or microphone not found. Can't record.\");\n//                 } else {\n//                     console.log('error');\n//             }\n//             });\n           \n           \n           \n//         }\n        \n//     }\n\n    \n//     function handleStop(event){\n//         //let stopButton = document.getElementById(\"stopButton\");\n//         //preview.srcObject\n//         // if (preview !== null) { \n            \n//         //     stop(preview.srcObject);\n\n//         // } \n//         // else{\n//             if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n                \n//             navigator.mediaDevices.getUserMedia({\n//                 video: true\n//             }).then((stream) => {\n//                 preview.srcObject = stream;\n//                 preview.captureStream =\n//                 preview.captureStream || preview.mozCaptureStream;\n//                 return new Promise((resolve) => (preview.onpause = resolve));\n//             }).then(() => stop(preview.captureStream()))\n//             .catch((error) => {\n//                 if (error.name === \"NotFoundError\") {\n//                     console.log(\"Camera or microphone not found. Can't record.\");\n//                 } else {\n//                     console.log('error');\n//             }\n//             });\n           \n            \n//         // }\n//         }\n//     }\n\n//     function stopRecord (stream){\n//         let recorder = new MediaRecorder(stream);\n//         recorder.stop();\n//     }\n\n//     return (\n//         <div className=\"main-body\">\n                \n//                 <p>this function will help you to know your skin Tempterature</p>\n//                 <p>camera required</p>\n//                 <div className=\"start\">\n//                     <button onClick={handleClick}> start testing</button>\n//                     <video id=\"preview\" width=\"160\" height=\"120\" autopplay=\"true\"></video>\n//                 </div>\n                    \n//                 <div>\n//                 {/* <video \n//                 ref={videoRef}\n//                 autoPlay\n//                 /> */}\n//                     {/* <h2>Recording</h2> */}\n//                     <video id=\"recording\" width=\"160\" height=\"120\" controls></video>\n//                 </div>\n//                 <div className=\"stop\">\n//                     <button onClick={handleStop} id=\"stopButton\" className=\"button\">Stop Recording</button>\n//                  </div>\n//         </div>\n        \n//     );\n// }\n\n\n"],"mappings":"AAAA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAKA;;AAEA;AACA;;AAGA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}