{"ast":null,"code":"var _jsxFileName = \"/Users/wangjiamin/Documents/GitHub/makeup-starters/src/SkinTemptColor.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//import '../SkinTemptColor.html'\nexport function SkinTemptColor(props) {\n  function handleClick(event) {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(stream => {\n        preview.srcObject = stream;\n        downloadButton.href = stream;\n        preview.captureStream = preview.captureStream || preview.mozCaptureStream;\n        return new Promise(resolve => preview.onplaying = resolve);\n      }).then(() => startRecording(preview.captureStream(), recordingTimeMS)).then(recordedChunks => {\n        let recordedBlob = new Blob(recordedChunks, {\n          type: \"video/webm\"\n        });\n        recording.src = URL.createObjectURL(recordedBlob);\n        downloadButton.href = recording.src;\n        downloadButton.download = \"RecordedVideo.webm\";\n        log(`Successfully recorded ${recordedBlob.size} bytes of ${recordedBlob.type} media.`);\n      }).catch(error => {\n        if (error.name === \"NotFoundError\") {\n          log(\"Camera or microphone not found. Can't record.\");\n        } else {\n          log(error);\n        }\n      });\n\n      //   function startRecording(stream, lengthInMS) {\n      //     let recorder = new MediaRecorder(stream);\n      //     let data = [];\n\n      //     recorder.ondataavailable = (event) => data.push(event.data);\n      //     recorder.start();\n      //     log(`${recorder.state} for ${lengthInMS / 1000} seconds…`);\n\n      //     let stopped = new Promise((resolve, reject) => {\n      //       recorder.onstop = resolve;\n      //       recorder.onerror = (event) => reject(event.name);\n      //     });\n\n      //     let recorded = wait(lengthInMS).then(() => {\n      //       if (recorder.state === \"recording\") {\n      //         recorder.stop();\n      //       }\n      //     });\n\n      //     return Promise.all([stopped, recorded]).then(() => data);\n      //   }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"this function will help you to know your skin Tempterature\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-body\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \" start testing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"this function will help you to know your skin Tempterature\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"camera required\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_c = SkinTemptColor;\nvar _c;\n$RefreshReg$(_c, \"SkinTemptColor\");","map":{"version":3,"names":["SkinTemptColor","props","handleClick","event","navigator","mediaDevices","getUserMedia","video","audio","then","stream","preview","srcObject","downloadButton","href","captureStream","mozCaptureStream","Promise","resolve","onplaying","startRecording","recordingTimeMS","recordedChunks","recordedBlob","Blob","type","recording","src","URL","createObjectURL","download","log","size","catch","error","name","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["/Users/wangjiamin/Documents/GitHub/makeup-starters/src/SkinTemptColor.js"],"sourcesContent":["//import '../SkinTemptColor.html'\nexport function SkinTemptColor(props){\n    \n    function handleClick(event){\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            navigator.mediaDevices.getUserMedia({\n                video: true\n            })\n            \n                navigator.mediaDevices\n                .getUserMedia({\n                video: true,\n                audio: true,\n            })\n            .then((stream) => {\n                preview.srcObject = stream;\n                downloadButton.href = stream;\n                preview.captureStream =\n                preview.captureStream || preview.mozCaptureStream;\n                return new Promise((resolve) => (preview.onplaying = resolve));\n            })\n            .then(() => startRecording(preview.captureStream(), recordingTimeMS))\n            .then((recordedChunks) => {\n                let recordedBlob = new Blob(recordedChunks, { type: \"video/webm\" });\n                recording.src = URL.createObjectURL(recordedBlob);\n                downloadButton.href = recording.src;\n                downloadButton.download = \"RecordedVideo.webm\";\n\n            log(\n                `Successfully recorded ${recordedBlob.size} bytes of ${recordedBlob.type} media.`\n             );\n            })\n            .catch((error) => {\n                if (error.name === \"NotFoundError\") {\n                log(\"Camera or microphone not found. Can't record.\");\n                } else {\n                log(error);\n            }\n            });\n           \n           \n\n            //   function startRecording(stream, lengthInMS) {\n            //     let recorder = new MediaRecorder(stream);\n            //     let data = [];\n              \n            //     recorder.ondataavailable = (event) => data.push(event.data);\n            //     recorder.start();\n            //     log(`${recorder.state} for ${lengthInMS / 1000} seconds…`);\n              \n            //     let stopped = new Promise((resolve, reject) => {\n            //       recorder.onstop = resolve;\n            //       recorder.onerror = (event) => reject(event.name);\n            //     });\n              \n            //     let recorded = wait(lengthInMS).then(() => {\n            //       if (recorder.state === \"recording\") {\n            //         recorder.stop();\n            //       }\n            //     });\n              \n            //     return Promise.all([stopped, recorded]).then(() => data);\n            //   }\n              \n              \n        }\n          \n        return(\n            <p>this function will help you to know your skin Tempterature</p>\n            \n        );\n        \n    }\n    return (\n        <div className=\"main-body\">\n                <button onClick={handleClick}> start testing</button>\n                <p>this function will help you to know your skin Tempterature</p>\n                <p>camera required</p>\n        </div>\n        \n    );\n}"],"mappings":";;AAAA;AACA,OAAO,SAASA,cAAcA,CAACC,KAAK,EAAC;EAEjC,SAASC,WAAWA,CAACC,KAAK,EAAC;IACvB,IAAIC,SAAS,CAACC,YAAY,IAAID,SAAS,CAACC,YAAY,CAACC,YAAY,EAAE;MAC/DF,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAChCC,KAAK,EAAE;MACX,CAAC,CAAC;MAEEH,SAAS,CAACC,YAAY,CACrBC,YAAY,CAAC;QACdC,KAAK,EAAE,IAAI;QACXC,KAAK,EAAE;MACX,CAAC,CAAC,CACDC,IAAI,CAAEC,MAAM,IAAK;QACdC,OAAO,CAACC,SAAS,GAAGF,MAAM;QAC1BG,cAAc,CAACC,IAAI,GAAGJ,MAAM;QAC5BC,OAAO,CAACI,aAAa,GACrBJ,OAAO,CAACI,aAAa,IAAIJ,OAAO,CAACK,gBAAgB;QACjD,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAMP,OAAO,CAACQ,SAAS,GAAGD,OAAQ,CAAC;MAClE,CAAC,CAAC,CACDT,IAAI,CAAC,MAAMW,cAAc,CAACT,OAAO,CAACI,aAAa,EAAE,EAAEM,eAAe,CAAC,CAAC,CACpEZ,IAAI,CAAEa,cAAc,IAAK;QACtB,IAAIC,YAAY,GAAG,IAAIC,IAAI,CAACF,cAAc,EAAE;UAAEG,IAAI,EAAE;QAAa,CAAC,CAAC;QACnEC,SAAS,CAACC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACN,YAAY,CAAC;QACjDV,cAAc,CAACC,IAAI,GAAGY,SAAS,CAACC,GAAG;QACnCd,cAAc,CAACiB,QAAQ,GAAG,oBAAoB;QAElDC,GAAG,CACE,yBAAwBR,YAAY,CAACS,IAAK,aAAYT,YAAY,CAACE,IAAK,SAAQ,CACnF;MACF,CAAC,CAAC,CACDQ,KAAK,CAAEC,KAAK,IAAK;QACd,IAAIA,KAAK,CAACC,IAAI,KAAK,eAAe,EAAE;UACpCJ,GAAG,CAAC,+CAA+C,CAAC;QACpD,CAAC,MAAM;UACPA,GAAG,CAACG,KAAK,CAAC;QACd;MACA,CAAC,CAAC;;MAIF;MACA;MACA;;MAEA;MACA;MACA;;MAEA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;;MAEA;MACA;IAGJ;;IAEA,oBACIE,OAAA;MAAAC,QAAA,EAAG;IAA0D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI;EAIzE;EACA,oBACIL,OAAA;IAAKM,SAAS,EAAC,WAAW;IAAAL,QAAA,gBAClBD,OAAA;MAAQO,OAAO,EAAEzC,WAAY;MAAAmC,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eACrDL,OAAA;MAAAC,QAAA,EAAG;IAA0D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACjEL,OAAA;MAAAC,QAAA,EAAG;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACxB;AAGd;AAACG,EAAA,GAhFe5C,cAAc;AAAA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}